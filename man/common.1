.TH COMMON 1 "26 August 2019" common common
.SH NAME
common \- Find the most common string in two files.
.SH SYNOPSIS
.B common
[OPTIONS]
\fIfile1\fR \fIfile2\fR
.SH DESCRIPTION
.B common
parses the input files, dynamically building a hash table from the
input, and finding the most common string by calculating the geometric mean
of the string's count in the first and second files.
.PP
A string could theoretically be present in one file a near-infinite amount of
times, but if it's not also present in the second file, it will result in a
commonality score of zero.
.SS OPTIONS
.TP
.BR \-h ", " \-\-help
Display the program help menu and exit.
.TP
.BR \-\-version
Display program version information and exit.
.TP
.BR \-v ", " \-\-verbose
Display detailed info during program execution.
.SH NOTES
The current implementation is pretty CPU-throttled, as I wasn't at all happy
with the implementation I wrote using pthreads, but due to time constraints I
decided to simply rip out the whole thing and replace with with a simple
single-processor sequential-read. What it lacks in complexity it makes up for
in speed though. It correctly processed two files six gigabytes each in about
five minutes. That's actually a little better than the results I was getting
by memory-mapping the input like I initially tried, which I must admit was
surprising.
.SH SEE ALSO
.BR strtok_r(3)
.SH AUTHOR
Jose Fernando Lopez Fernandez <jflopezfernandez@gmail.com>
.SH BUGS
The
.B \-\-verbose
command-line option does absolutely nothing right now.
