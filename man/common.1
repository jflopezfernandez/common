.TH COMMON 1 "26 August 2019" common common
.SH NAME
common \- Find the most common string in two files.
.SH SYNOPSIS
.B common
[OPTIONS]
\fIfile1\fR \fIfile2\fR
.SH DESCRIPTION
.B common
parses the input files, dynamically building a hash table from the
input, and finding the most common string by calculating the geometric mean
of the string's count in the first and second files.
.PP
A string could theoretically be present in one file a near-infinite amount of
times, but if it's not also present in the second file, it will result in a
commonality score of zero.
.SS OPTIONS
.TP
.BR \-j " " N ", " \-\-threads " " N
Specify the number of threads to use during program execution, with the default
being two. In the current implementation, the number of threads specified
must be an even number, as the threads are then evenly split amongst the two
input files.
.TP
.BR \-h ", " \-\-help
Display the program help menu and exit.
.TP
.BR \-\-version
Display program version information and exit.
.TP
.BR \-v ", " \-\-verbose
Display detailed info during program execution.
.SH NOTES
Profiling the new multithreaded version has shown that the ideal number of
threads is roughly eight on a fairly modern system, provided the input file is
of a decent size. Input files of less than a few megabytes need no more than
two threads, one for each input file.
.PP
The decreasing and even negative returns of adding more threads is that the
hash table underlying the implementation relies on lock-based synchronization
primitives. As more threads enter the picture, the more often they must wait
for a resource.
.SH SEE ALSO
.BR strtok_r(3) ", " pthreads(7)
.SH AUTHOR
Jose Fernando Lopez Fernandez <jflopezfernandez@gmail.com>
.SH BUGS
The
.B \-\-verbose
command-line option does *almost* absolutely nothing right now (progress has
been made!).
